from telebot import TeleBot
from telebot import types
from random import randint
from mainOOP import Reader_bot

TOKEN = "1627632669:AAEQsLcFGxo89xeH5LuhqrYVTw-Mg8Gk3cU"

# create an instance of TeleBot class
bot = TeleBot(TOKEN)
notes0 = Reader_bot()
paper_arg = 'graph'
font_arg = "Abram"
ink_arg = "blue"

def p_or_t(message):
    question = """–Ø —Å—Ç–∞—Ä–∞—é—Å—å –±—ã—Ç—å —É–º–Ω—ã–º - –º–Ω–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —É—á–µ–±–Ω–∏–∫–∞, –∞ —è —Å—á–∏—Ç–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø–µ—Ä–µ–ø–∏—à—É –Ω–∞ –ª–∏—Å—Ç–æ—á–µ–∫.
–ù–æ –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—à—å –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, –ø—Ä–æ–±–ª–µ–º —Ç–æ–∂–µ –Ω–µ –±—É–¥–µ—Ç üòä"""
    markup = types.InlineKeyboardMarkup(row_width=2)
    item1 = types.InlineKeyboardButton("–ö–∞—Ä—Ç–∏–Ω–∫–∞", callback_data='picture')
    item2 = types.InlineKeyboardButton("–¢–µ–∫—Å—Ç", callback_data='plain text')

    markup.add(item1, item2)

    bot.send_message(message.chat.id, question, reply_markup=markup)


@bot.message_handler(commands=['start'])
def send_welcome(message):
    # send the sticker
    sti = open("stickerCAT.webp", 'rb')
    bot.send_sticker(message.chat.id, sti)

    bot.send_message(message.chat.id, '–ó–¥–∞—Ä–æ–≤–∞. –ö–æ–Ω—Å–ø–µ–∫—Ç –¥–µ–ª–∞—Ç—å –±—É–¥–µ–º? –ï—Å–ª–∏ —á—Ç–æ, –ø–∏—à–∏ "/notes"')


@bot.message_handler(commands=["notes"])
def ask_settings(message):
    if message.chat.type == 'private':
        question = "–û—Ç–ª–∏—á–Ω–æ, –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏? –ü–æ–¥—Ä–æ–±–Ω–µ–µ –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤ –º–æ—ë–º –æ–ø–∏—Å–∞–Ω–∏–∏ (–≤ —Å–∞–º–æ–º 1 —Å–æ–æ–±—â–µ–Ω–∏–∏)"

        # inline keyboard
        markup = types.InlineKeyboardMarkup(row_width=2)
        item1 = types.InlineKeyboardButton("–ë—É–¥–µ–º", callback_data='1')
        item2 = types.InlineKeyboardButton("–ù–µ –±—É–¥–µ–º", callback_data='0')

        markup.add(item1, item2)

        bot.send_message(message.chat.id, question, reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–±–æ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π üò•")


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    global notes0, paper_arg, font_arg, ink_arg
    try:
        if call.message:

            ID = call.message.chat.id

            if call.data == '1':
                """
                Settings: 
                    font, 
                    paper, 
                    ink
                """
                bot.send_message(ID, """–ù–∞–ø–∏—à–∏ —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å. 3 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:"
 1) —Ç–∏–ø —Ä–∞–∑–ª–∏–Ω–æ–≤–∫–∏ –ª–∏—Å—Ç–∞:
 –≤ –∫–ª–µ—Ç–∫—É(graph) / –≤ –ª–∏–Ω–µ–π–∫—É(lined) / –ø—É—Å—Ç–æ–π(A4)
 2) –ø–æ—á–µ—Ä–∫
 (1/2/3/4)
 p.s –≤–Ω–∏–∑—É –æ–Ω–∏ –≤—Å–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã
 3) —Ü–≤–µ—Ç —á–µ—Ä–Ω–∏–ª:
 —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π(purple)/—Å–∏–Ω–∏–π(blue)/—Ç–µ–º–Ω–æ-—Å–∏–Ω–∏–π(blueM)/—á–µ—Ä–Ω—ã–π(black)
 
 –ù–ê–ß–ù–ò –°–û–û–ë–©–ï–ù–ò–ï –° "**" –∏ –ø–∏—à–∏ –±–µ–∑ "," ‚ò∫
 –ù–∞–ø—Ä–∏–º–µ—Ä: ** lined 1 blueM
 
 –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥ –∏ —Å—Ä–∞–∑—É –ø—Ä–∏—Å–ª–∞—Ç—å –º–Ω–µ —Ñ–æ—Ç–æ/—Ç–µ–∫—Å—Ç. –¢–æ–≥–¥–∞ –ø–æ—Å—Ç–∞–≤—è—Ç—Å—è –∫–ª–µ—á–∞—Ç–∞—è —Ä–∞–∑–ª–∏–Ω–æ–≤–∫–∞, —Å–∏–Ω–∏–µ —á–µ—Ä–Ω–∏–ª–∞ –∏ 1 –ø–æ—á–µ—Ä–∫))
 """)
                bot.send_photo(ID,
                               'https://t4569419.p.clickup-attachments.com/t4569419/98a68dda-22c0-4800-afae-9428dfd87de6/inLine0.png')
                bot.send_photo(ID,
                               'https://t4569419.p.clickup-attachments.com/t4569419/e9a4efdb-e79e-4081-820a-798953ed51d6/A41.png')
                bot.send_photo(ID,
                               'https://t4569419.p.clickup-attachments.com/t4569419/f7bb1cec-7bb8-441b-a344-bdfc4e974417/Int2.png')
                bot.send_photo(ID,
                               'https://t4569419.p.clickup-attachments.com/t4569419/ada07f52-53e3-4bcf-97cf-461dfb62855c/inLine3.png')

            elif call.data == '0':
                question = bot.send_message(call.message.chat.id, '–¢–æ–≥–¥–∞ —Å—Ä–∞–∑—É –∫ –¥–µ–ª—É.')

                p_or_t(question)

            elif call.data == 'picture':
                bot.send_message(call.message.chat.id, "–ü—Ä–∏—Å—ã–ª–∞–π üëáüèª")

            elif call.data == 'plain text':
                bot.send_message(call.message.chat.id, "–ü—Ä–∏—Å—ã–ª–∞–π üëáüèª")

    except ValueError as e:
        bot.send_message(call.message.chat.id, "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
        sad_sti = open("stickerERROR.webp", 'rb')
        bot.send_sticker(call.message.chat.id, sad_sti)


@bot.message_handler(content_types=['photo'])
def get_picture(message):
    global notes0
    try:
        chat_id = message.chat.id
        bot.send_message(chat_id, "–ü–æ–¥–æ–∂–¥–∏ —Å–µ–∫—É–Ω–¥—É ...")
        file_info = bot.get_file(message.photo[0].file_id)
        name = file_info.file_path

        downloaded_file = bot.download_file(name)

        saved = "D:/PYTHON/fineReader_bot/received/" + name[name.index('/') + 1:];

        with open(saved, 'wb') as new_file:
            new_file.write(downloaded_file)

        notes0.get_text(saved)
        notes0.prepare_text()
        notes0.put_text()

        # to send the result
        bot.send_photo(chat_id, notes0.image)

    except ValueError:

        bot.send_message(chat_id, """–ù–µ –º–æ–≥—É —Å—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ 
    1. –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –ø—Ä—è–º—ã–º —É–≥–ª–æ–º
    2. –†–∞–∑–≥–ª–∞–¥—å—Ç–µ –±—É–º–∞–≥—É
    3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤""")
        sad_sti = open("stickerQ1.webp", 'rb')
        bot.send_sticker(chat_id, sad_sti)

    except Exception as error:
        bot.send_message(chat_id, "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
        sad_stickers = ["stickerSURPRISED.webp", "stickerFROWN.webp", "stickerQ.webp", "stickerQ.webp",
                        "stickerQ1.webp", "stickerQ2.webp"]
        sad_sti = open(sad_stickers[randint(0, 5)], 'rb')
        bot.send_sticker(message.chat.id, sad_sti)


@bot.message_handler(content_types=['text'])
def from_text(message):
    global notes0
    try:
        if message[:2] == "**":
            options = message[3:].split()
            notes0 = Reader_bot(options[0], options[1], int(options[2]) - 1)

        chat_id = message.chat.id

        notes0.put_text(message.text)

        # to send the result
        bot.send_photo(chat_id, notes0.image)

    except Exception as error:
        bot.send_message(chat_id, "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
        sad_stickers = ["stickerSURPRISED.webp", "stickerFROWN.webp", "stickerQ.webp", "stickerQ.webp",
                        "stickerQ1.webp", "stickerQ2.webp"]
        sad_sti = open(sad_stickers[randint(0, 5)], 'rb')
        bot.send_sticker(message.chat.id, sad_sti)


bot.polling(none_stop=True, interval=0)
